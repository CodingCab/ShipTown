#!/bin/sh
echo "Running pre-commit hooks"

PROJECT=`php -r "echo dirname(dirname(dirname(realpath('$0'))));"`
STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
    oIFS=$IFS
    IFS='
    '
    SFILES="$1"
    IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}

echo "Auto Generating Jobs tests..."
php artisan app:generate-jobs-tests >&1
if [ $? -ne 0 ]
then
    echo "Error generating Jobs tests. Please fix the issue before commit."
    exit 1
fi

echo "Auto Generating Modules Jobs tests..."
php artisan app:generate-modules-tests >&1
if [ $? -ne 0 ]
then
    echo "Error generating Modules Jobs tests. Please fix the issue before commit."
    exit 1
fi

echo "Auto Generating Web Routes Jobs tests..."
php artisan app:generate-routes-tests >&1
if [ $? -ne 0 ]
then
    echo "Error generating Web Routes Jobs tests. Please fix the issue before commit."
    exit 1
fi

echo "Running PHPUnit tests..."
for FILE in $SFILES
do
    FILE_NAME=$(basename "$FILE" .php)

#    echo "Executing: vendor/bin/phpunit --stop-on-failure --filter \"$FILE_NAME\""
    vendor/bin/phpunit --stop-on-failure --filter "$FILE_NAME" >&1
    if [ $? -ne 0 ]
    then
        echo "PHPUnit tests failed. Please fix the issue before commit."
        exit 1
    fi

#    echo "Executing: php artisan dusk --stop-on-failure --stop-on-error --filter \"$FILE_NAME\""
    php artisan dusk --stop-on-failure --stop-on-error --filter "$FILE_NAME" >&1
    if [ $? -ne 0 ]
    then
        echo "Dusk tests failed. Please fix the issue before commit."
        exit 1
    fi

    FILES="$FILES $PROJECT/$FILE"
done

echo "Checking PHP Lint..."
for FILE in $SFILES
do
    php -l -d display_errors=0 $FILE >&1
    if [ $? -ne 0 ]
    then
        echo "Fix the error before commit."
        exit 1
    fi
    FILES="$FILES $PROJECT/$FILE"
done

echo "Running Code Sniffer. Code standard PSR2."
if [ "$FILES" != "" ]
then
    ./vendor/bin/phpcs --encoding=utf-8 -n -p $FILES >&1
    if [ $? -ne 0 ]
    then
        echo "Fix the error before commit."
        exit 1
    fi
fi

exit $?
